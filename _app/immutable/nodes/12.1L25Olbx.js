import{c,t as v}from"../chunks/DCWuKN7w.js";import"../chunks/C7L7pc1m.js";import{D as t,E as a,G as i,F as x}from"../chunks/CC_zDywQ.js";import{C as d}from"../chunks/B1c0_Of2.js";var m=v(`<div class="w-1/2 mt-10 h-full font-mono"><div class="text-3xl md:text-5xl pb-2">Minesweeper Solver</div> <div class="flex flex-col gap-2"><div class="text-xl md:text-2xl text-gray-400">Built with</div> <div class="flex flex-row h-8 gap-4"><!> <!></div></div> <hr class="m-2 border-gray-200"> <div class="flex flex-col gap-4 pt-6 px-4"><div class="flex flex-col gap-2"><div class="text-xl md:text-3xl">Overview</div> <div class="text-md md:text-lg text-gray-500">The goal was to train a reinforcement learning agent to be able to play the game of Minesweeper with high accuracy. Due to the random nature of the
        game, the board size was small to reduce training time and reduce noise during training.</div></div> <div class="flex flex-col gap-2"><div class="text-xl md:text-3xl">Sandbox Minesweeper environment</div> <div class="text-md md:text-lg text-gray-500">In order to train efficiently and effectively, a fast Minesweeper environment needed to be created. First, there is the information exposed to the agent,
        basically what the player would see in the game (i.e. the revealed squares). Then, the other concern is the moves made, namely the chain reveal that often happens
        needs to be efficient. This was done in NumPy, leveraging their nd-array functionality.</div></div> <div class="flex flex-col gap-2"><div class="text-xl md:text-3xl">Reinforcement Learning</div> <div class="text-md md:text-lg text-gray-500">The two techniques applied were PPO (proximal policy approximation) and A2C (advantage actor critic), applied across board sizes 3x3, 5x5 and 7x7. 
        Then, positive rewards are assigned to each safe move, and negative rewards are assigned to losing moves and duplicate moves. After hyperparameter tuning,
        the two models achieved similar performance reaching about 70% accuracy, which is decent with regards to the non-deterministic nature of the game.</div></div></div></div>`);function w(o){var e=m(),r=a(t(e),2),n=a(t(r),2),s=t(n);d(s,{svg:"python"});var l=a(s,2);d(l,{svg:"numpy"}),i(n),i(r),x(4),i(e),c(o,e)}export{w as component};
